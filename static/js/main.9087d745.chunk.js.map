{"version":3,"sources":["Form/Form.js","Charts/BarChart.js","Navbar/Navbar.js","Charts/AreaChart.js","App.js","serviceWorker.js","index.js"],"names":["setCountryCases","setCountryData","setMessage","setTodayRecovered","setTodayDead","setTodayConfirmed","useState","country","setCountry","Form","className","onSubmit","e","preventDefault","today","Date","toISOString","split","yesterday","now","console","log","fetch","then","response","json","res","type","msg","date","active","confirmed","recovered","deaths","catch","err","data","newCases","forEach","obj","push","Cases","FormGroup","Label","Input","required","placeholder","onChange","target","value","BarGraph","title","Container","fluid","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","style","borderBottom","Nav","NavbarBrand","tag","href","fontSize","color","AreaGraph","App","worldData","setWorldData","todayWorld","setTodayWorld","countryData","countryCasesData","todayConfirmed","todayRecovered","todayDead","flash","setFlash","flashMessage","useEffect","setTimeout","error","Confirmed","NewConfirmed","Deaths","NewDeaths","Recovered","NewRecovered","minHeight","Navbar","Alert","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9087d745.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport {\n  Form,\n  FormGroup,\n  Input,\n  Label,\n} from \"reactstrap\"\nexport default ({setCountryCases, setCountryData, setMessage, setTodayRecovered, setTodayDead, setTodayConfirmed}) => {\n  const [country, setCountry] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const today = new Date().toISOString().split('T')[0];\n    const yesterday = new Date(Date.now() - 2 * 86400000).toISOString().split('T')[0];\n\n    console.log(today)\n    console.log(yesterday)\n    // Get General Country stats\n    fetch(`https://rapidapi.p.rapidapi.com/country?name=${country}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    .then(response => {\n      response.json()\n      .then(res => {\n        // In case of invalid country name throw error\n        if(!res[0] || !res[0].country) throw { type: \"err\", msg:\"Invalid Country Name!\"}\n        setCountryData([{\n          ...res[0], \n          date: today,\n          active: res[0].confirmed - res[0].recovered - res[0].deaths  \n        }])\n      })\n      .catch(err => setMessage(err.msg))\n    })\n    .catch(err => setMessage(err.msg))\n\n    // Get Info about cases evolution\n    // Active Cases since day one\n    fetch(`https://api.covid19api.com/total/country/${country}`)\n     .then(res => {\n      res.json()\n        .then(data => {\n          // Preprocess date key-value pair to have a standard YYYY-MM-DD format\n          const newCases = [];\n          data.forEach((obj) => {\n            newCases.push({...obj, Date: obj.Date.split('T')[0]})\n          })\n          setCountryCases(newCases)\n        })\n    .catch(err => console.log(err))\n    })\n\n    // Get Today Death Cases for this country\n    fetch(`https://api.covid19api.com/country/${country}/status/deaths?from=${yesterday}&to=${today}`)\n      .then(res =>\n        res.json()\n          .then(data => {\n            setTodayDead(\n              [{Cases: data[1].Cases - data[0].Cases}]\n            )\n          })  \n      )\n    \n      // Get Today Recovered Cases for this country\n    fetch(`https://api.covid19api.com/country/${country}/status/recovered?from=${yesterday}&to=${today}`)\n    .then(res =>\n      res.json()\n        .then(data => {\n          setTodayRecovered(\n            [{Cases: data[1].Cases - data[0].Cases}]\n          )\n        })  \n    )\n\n    // Get Today confirmed Cases for this country\n    fetch(`https://api.covid19api.com/country/${country}/status/confirmed?from=${yesterday}&to=${today}`)\n    .then(res =>\n      res.json()\n        .then(data => {\n          setTodayConfirmed(\n            [{Cases: data[1].Cases - data[0].Cases}]\n          )\n        })  \n    ) \n  }\n\n  return (\n    <Form className=\"mt-3\" onSubmit={handleSubmit}>\n      <FormGroup>\n        <Label className=\"d-block text-center\">View Country Situation</Label>\n        <Input required placeholder=\"Country...\" className=\"w-50 mx-auto\"type=\"text\" onChange={(e) => setCountry(e.target.value)} />\n      </FormGroup>\n      <FormGroup className=\"text-center\">\n        <button className=\"green-button\">\n          Search\n        </button>\n      </FormGroup>\n    </Form>\n  )\n}","import React from \"react\"\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar, ResponsiveContainer } from \"recharts\"\nimport { Container } from \"reactstrap\"\n\nexport const BarGraph = ({data, title}) => {\n  // Preprocess data\n  console.log(data)\n  return(\n    <Container fluid className=\"main-chart-container\">\n      <h3 className=\"mx-auto\">{ \"Total \" + data[0].country}</h3>\n      <br />\n      { \n      <ResponsiveContainer className=\"mx-auto\" width=\"100%\" height={300}>\n        <BarChart data={data}\n        margin={{ top: 20, right: 10, left: 30, bottom: 0 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"confirmed\" fill=\"#8884d8\" />\n          <Bar dataKey=\"recovered\" fill=\"#82ca9d\" />\n          <Bar dataKey=\"active\" fill=\"grey\" />\n          <Bar dataKey=\"deaths\" fill=\"rgba(0,0,0,1)\" />\n          <Bar dataKey=\"critical\" fill=\"red\" />\n        </BarChart>\n      </ResponsiveContainer>\n      }\n    </Container>\n  )\n}\n","\nimport React from \"react\";\nimport { RiVirusLine } from \"react-icons/ri\";\n\nimport {\n  Container,\n  Nav,\n  NavbarBrand,\n} from \"reactstrap\";\n\nexport default () => {\n  return (\n    <Container className=\"py-2\" fluid style={{borderBottom: \"1px solid #82ca9d\"}}>\n      <Nav>\n        <NavbarBrand tag=\"a\" href=\"\" style={{fontSize: \"1.5rem\"}}className=\"text-dark d-flex align-items-center\">\n          {'<'} \n          <RiVirusLine color=\"green\" />Covid-19 Statistics\n          {'/>'}\n        </NavbarBrand>\n      </Nav>\n    </Container>\n  )\n}","import React from \"react\";\nimport {\n  AreaChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Area,\n  ResponsiveContainer\n} from \"recharts\";\nimport { Container } from \"reactstrap\"\n\nexport const AreaGraph = ({data, type, color}) => {\n  return (\n    <Container className=\"area-container\" fluid>\n      <h2 style={{color: color}} className=\"w-100 text-center\">{type}</h2>\n      <ResponsiveContainer width=\"90%\" className=\"mx-auto\" height={300}>\n        <AreaChart data={data}>\n          <YAxis />\n          <XAxis dataKey=\"Date\" />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area fill={color} dataKey={type}></Area>\n        </AreaChart>\n      </ResponsiveContainer>\n    </Container>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { \n  Container, \n  Alert\n} from \"reactstrap\";\n\n// Functional comp\nimport SearchForm from \"./Form/Form\";\nimport { BarGraph } from \"./Charts/BarChart\";\nimport Navbar from \"./Navbar/Navbar\";\nimport { AreaGraph }  from './Charts/AreaChart';\n\nfunction App() {\n  // From Day One -> World data - loaded on page load\n  const [worldData, setWorldData] = useState({})\n\n  // Today Only - World cases Today\n  const [todayWorld, setTodayWorld] = useState({})\n\n  // From Day One -> Country specific data loaded upon form submit\n  const [countryData, setCountryData] = useState({})\n  const [countryCasesData, setCountryCases] = useState({})\n\n  // Today Only -> Country cases Today\n  const [todayConfirmed, setTodayConfirmed] = useState({})\n  const [todayRecovered, setTodayRecovered] = useState({})\n  const [todayDead, setTodayDead] = useState({})\n  // PREPROCESS DATA FROM API\n\n  // Flash message states - display errors and notifications \n  const [flash, setFlash] = useState(false)\n  const [flashMessage, setMessage] = useState(\"\")\n\n  // When FlashMessage state changes it means a new alert needs to be displayed\n  useEffect(() => {\n    if(flashMessage !== \"\") setFlash(true); // triggers the next useEffect\n  }, [flashMessage])\n\n  // Hide FlashMessage after 3 seconds\n  useEffect(() => {\n    if(flash) setTimeout(() => {\n      setFlash(false)\n      setMessage(\"\")\n    }, 3000)\n  }, [flash])\n\n  useEffect(() => {\n    // GET World Data total\n    fetch(\"https://rapidapi.p.rapidapi.com/totals\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    .then(response => {\n      response.json()\n        .then(data => {\n          //if(!data[0]) throw Error({type: \"err\", msg: \"Can't process request. Please Try Again!\"})\n          setWorldData([{\n            ...data[0],\n            date: new Date().toISOString().split('T')[0],\n            active: data[0].confirmed - data[0].recovered - data[0].deaths,\n            country: \"Worldwide\"  \n          }])\n        })\n        .catch(err => console.log(err))\n    })\n    .catch(err => console.error(err))\n\n    \n    const today = new Date().toISOString().split('T')[0];\n    const yesterday = new Date(Date.now() - 2 * 86400000).toISOString().split('T')[0];\n    // GET World data Today\n    fetch(`https://api.covid19api.com/world?from=${yesterday}&to=${today}`)\n      .then(res =>{\n        res.json()\n          .then(data => {\n            setTodayWorld({\n              Confirmed: data[1].NewConfirmed,\n              Deaths: data[1].NewDeaths,\n              Recovered: data[1].NewRecovered\n            })\n          })\n      })\n      \n  }, [])\n\n  return (\n    <Container style={{minHeight: \"100vh\"}} className=\"px-0 bg-light\" fluid>\n      <Navbar />\n      {flash && \n        <Alert color=\"warning\" className=\"text-center\">\n          {flashMessage}\n        </Alert>\n      }\n      <SearchForm\n        countryData={countryData} \n        setCountryData={setCountryData}\n        setCountryCases={setCountryCases}\n        setMessage={setMessage}\n        setTodayDead={setTodayDead}\n        setTodayConfirmed={setTodayConfirmed}\n        setTodayRecovered={setTodayRecovered}\n        />\n      {  \n      // <!-- DO NOT SHOW UNTILL COUNTRY INPUT -->\n        // MAIN CONTAINER COUNTRY\n        todayRecovered.length && todayDead.length && todayConfirmed.length && countryData.length && \n        <Container className=\"section-info\">\n          <Container fluid className=\"text-data-container\">\n            <h3>Today</h3>\n            <p>Recovered: <span style={{color: \"#82ca9d\"}}>+{todayRecovered[0].Cases}</span></p>\n            <p>Deaths: <span style={{color: \"black\"}}>+{todayDead[0].Cases}</span></p>\n            <p>Confirmed: <span style={{color: \"#8884d8\"}}>+{todayConfirmed[0].Cases}</span></p>\n          </Container>\n          <BarGraph data={countryData} />\n        </Container>\n      }\n\n      { /* Specific Case Types Graphs By Country */\n        countryCasesData.length && \n        <Container className=\"d-flex flex-wrap justify-content-between\" fluid>\n          <AreaGraph data={countryCasesData} type=\"Confirmed\" color=\"#8884d8\" />\n          <AreaGraph data={countryCasesData} type=\"Active\" color=\"grey\"/>\n          <AreaGraph data={countryCasesData} type=\"Recovered\" color=\"#82ca9d\" />\n          <AreaGraph data={countryCasesData} type=\"Deaths\" color=\"black\" />\n        </Container>\n      }\n        \n        { // MAIN CONTAINER WORLD\n          todayWorld.Recovered && worldData.length && \n          <Container fluid className=\"section-info\">\n            <Container fluid className=\"text-data-container\">\n              <h3>Today</h3>\n              <p>Recovered: <span style={{color: \"#82ca9d\"}}>+{todayWorld.Recovered}</span></p>\n              <p>Deaths: <span style={{color: \"black\"}}>+{todayWorld.Deaths}</span></p>\n              <p>Confirmed: <span style={{color: \"#8884d8\"}}>+{todayWorld.Confirmed}</span></p>\n            </Container>\n            <BarGraph data={worldData}/>\n          </Container>\n        }\n        \n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}