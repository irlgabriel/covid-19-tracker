{"version":3,"sources":["LoadingOverlay/LoadingOverlay.js","Form/Form.js","Charts/BarChart.js","Navbar/Navbar.js","Charts/AreaChart.js","App.js","serviceWorker.js","index.js"],"names":["id","className","Spinner","color","setCountryCases","setCountryData","setMessage","setTodayRecovered","setTodayDead","setTodayConfirmed","country","setCountry","useState","countries","setCountries","loading","setLoading","useEffect","fetch","then","res","json","data","map","obj","Country","Form","onSubmit","e","preventDefault","find","cName","toLowerCase","today","Date","now","toISOString","split","yesterday","Promise","all","method","headers","response","date","active","confirmed","recovered","deaths","catch","err","msg","newCases","forEach","push","console","log","Cases","setTimeout","values","LoadingOverlay","FormGroup","Label","Input","required","placeholder","type","onChange","target","value","BarGraph","title","Container","fluid","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","style","borderBottom","Nav","NavbarBrand","tag","href","fontSize","AreaGraph","App","worldData","setWorldData","todayWorld","setTodayWorld","countryData","countryCasesData","todayConfirmed","todayRecovered","todayDead","flash","setFlash","flashMessage","error","Confirmed","NewConfirmed","Deaths","NewDeaths","Recovered","NewRecovered","minHeight","Navbar","Alert","length","str","splitStr","i","charAt","toUpperCase","substring","join","titleCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0de1a15d.chunk.js","sourcesContent":["import React from \"react\"\nimport { Spinner } from \"reactstrap\"\nexport default () => {\n  return(\n    <div id=\"loading-screen\" className=\"bg-light\">\n      <Spinner color=\"success\" />\n    </div>\n  )\n}","import React, { useState, useEffect } from \"react\";\nimport { Form, FormGroup, Input, Label } from \"reactstrap\";\nimport LoadingOverlay from \"../LoadingOverlay/LoadingOverlay\"\nexport default ({\n  setCountryCases,\n  setCountryData,\n  setMessage,\n  setTodayRecovered,\n  setTodayDead,\n  setTodayConfirmed,\n  country,\n  setCountry,\n}) => {\n  const [countries, setCountries] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  // Get all countries when component mounts\n  useEffect(() => {\n    fetch('https://api.covid19api.com/countries')\n      .then(res =>\n        res.json()\n          .then(data => {\n            setCountries(data.map(obj => obj.Country))\n          })\n      )\n  }, [])\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // check if country is in countries array (aka if it is valid)\n    if(!countries.find(cName => cName.toLowerCase() === country.toLowerCase())) {\n      setMessage(\"Invalid Country Name!\")\n      return;\n    }\n    const today = new Date(Date.now()).toISOString().split(\"T\")[0];\n    const yesterday = new Date(Date.now() - 3 * 86400000).toISOString().split(\"T\")[0];\n        \n      setLoading(true)\n      Promise.all([\n        fetch(`https://rapidapi.p.rapidapi.com/country?name=${country}`, {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\",\n        },\n      })\n        .then((response) => {\n          response\n            .json()\n            .then((res) => {\n              setCountryData([\n                {\n                  ...res[0],\n                  date: today,\n                  active: res[0].confirmed - res[0].recovered - res[0].deaths,\n                },\n              ]);\n            })\n            .catch((err) => setMessage(err.msg));\n        })\n        .catch((err) => setMessage(err.msg))\n      ,\n      fetch(`https://api.covid19api.com/total/country/${country}`).then((res) => {\n        res\n          .json().then((data) => {\n            // Preprocess date key-value pair to have a standard YYYY-MM-DD format\n            const newCases = [];\n            data.forEach((obj) => {\n              newCases.push({ ...obj, Date: obj.Date.split(\"T\")[0] });\n            });\n            setCountryCases(newCases);\n          })\n          .catch((err) => console.log(err))\n      }),\n      fetch(\n        `https://api.covid19api.com/country/${country}/status/deaths?from=${yesterday}&to=${today}`\n      )\n      .then((res) =>\n        res.json().then((data) => {\n          console.log(data)\n          if (data[1]) {\n            setTodayDead([{ Cases: data[1].Cases - data[0].Cases }]);\n          }\n        })\n      )\n      .catch(err => console.log(err)),\n      fetch(\n        `https://api.covid19api.com/country/${country}/status/recovered?from=${yesterday}&to=${today}`\n      )\n      .then((res) =>\n        res.json().then((data) => {\n          console.log(data)\n          if (data[1]) {\n            setTodayRecovered([{ Cases: data[1].Cases - data[0].Cases }]);\n          }\n        })\n      )\n      .catch(err => console.log(err)),\n      fetch(\n        `https://api.covid19api.com/country/${country}/status/confirmed?from=${yesterday}&to=${today}`\n      )\n      .then((res) =>\n        res.json().then((data) => {\n          console.log(data)\n          if (data[1]) {\n            setTodayConfirmed([{ Cases: data[1].Cases - data[0].Cases }]);\n          }\n        })\n      )\n      .catch(err => console.log(err))\n    ])\n      .then(\n        // adds .5s to the loading time. \n        setTimeout(() => {\n          setLoading(false) \n        }, 500)\n      )\n      .catch(values =>\n        console.log(values)\n      )\n    \n  };\n\n  return (\n    <Form className=\"mt-3\" id=\"form\" onSubmit={handleSubmit}>\n      {loading && <LoadingOverlay />}\n      <FormGroup>\n        <Label className=\"d-block text-center\">View Country Situation</Label>\n        <Input\n          required\n          placeholder=\"Country...\"\n          className=\"w-50 mx-auto\"\n          type=\"text\"\n          onChange={(e) => setCountry(e.target.value)}\n        />\n      </FormGroup>\n      <FormGroup className=\"text-center\">\n        {\n          !loading &&\n          <button className=\"green-button\">Search</button>\n        }\n      </FormGroup>\n    </Form>\n  );\n};\n","import React from \"react\";\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Container } from \"reactstrap\";\n\nexport const BarGraph = ({ data, title }) => {\n  // Preprocess data\n  return (\n    <Container fluid className=\"main-chart-container\">\n      <h3>Totals</h3>\n      {\n        <ResponsiveContainer className=\"mx-auto\" width=\"100%\" height={300}>\n          <BarChart\n            data={data}\n            margin={{ top: 20, right: 10, left: 30, bottom: 0 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"confirmed\" fill=\"#8884d8\" />\n            <Bar dataKey=\"recovered\" fill=\"#82ca9d\" />\n            <Bar dataKey=\"active\" fill=\"grey\" />\n            <Bar dataKey=\"deaths\" fill=\"rgba(0,0,0,1)\" />\n            <Bar dataKey=\"critical\" fill=\"red\" />\n          </BarChart>\n        </ResponsiveContainer>\n      }\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { RiVirusLine } from \"react-icons/ri\";\n\nimport { Container, Nav, NavbarBrand } from \"reactstrap\";\n\nexport default () => {\n  return (\n    <Container\n      className=\"py-2\"\n      fluid\n      style={{ borderBottom: \"1px solid #82ca9d\" }}\n    >\n      <Nav>\n        <NavbarBrand\n          tag=\"a\"\n          href=\"\"\n          style={{ fontSize: \"1.5rem\" }}\n          className=\"text-dark d-flex align-items-center\"\n        >\n          {\"<\"}\n          <RiVirusLine color=\"green\" />\n          Covid-19 Statistics\n          {\"/>\"}\n        </NavbarBrand>\n      </Nav>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport {\n  AreaChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Area,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Container } from \"reactstrap\";\n\nexport const AreaGraph = ({ data, type, color }) => {\n  return (\n    <Container className=\"area-container\" fluid>\n      <h3 style={{ color: color }} className=\"w-100 text-center\">\n        {type}\n      </h3>\n      <ResponsiveContainer width=\"90%\" className=\"mx-auto\" height={300}>\n        <AreaChart data={data}>\n          <YAxis />\n          <XAxis dataKey=\"Date\" />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area fill={color} dataKey={type}></Area>\n        </AreaChart>\n      </ResponsiveContainer>\n    </Container>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Alert } from \"reactstrap\";\n\n// Functional comp\nimport LoadingOverlay from \"./LoadingOverlay/LoadingOverlay\"\nimport SearchForm from \"./Form/Form\";\nimport { BarGraph } from \"./Charts/BarChart\";\nimport Navbar from \"./Navbar/Navbar\";\nimport { AreaGraph } from \"./Charts/AreaChart\";\n\nfunction App() {\n  // Loading state?\n  const [loading, setLoading] = useState(false)\n\n  // From Day One -> World data - loaded on page load\n  const [worldData, setWorldData] = useState({});\n\n  // Today Only - World cases Today\n  const [todayWorld, setTodayWorld] = useState({});\n\n  // From Day One -> Country specific data loaded upon form submit\n  const [countryData, setCountryData] = useState({});\n  const [countryCasesData, setCountryCases] = useState({});\n\n  // Today Only -> Country cases Today\n  const [todayConfirmed, setTodayConfirmed] = useState({});\n  const [todayRecovered, setTodayRecovered] = useState({});\n  const [todayDead, setTodayDead] = useState({});\n\n  // Form Input\n  const [country, setCountry] = useState(\"\");\n\n  // Flash message states - display errors and notifications\n  const [flash, setFlash] = useState(false);\n  const [flashMessage, setMessage] = useState(\"\");\n\n  // Capitalizes every word of a string.\n  function titleCase(str) {\n    var splitStr = str.toLowerCase().split(' ');\n    for (let i = 0; i < splitStr.length; i++) {\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \n    }\n    return splitStr.join(' '); \n  }\n\n  // When FlashMessage state changes it means a new alert needs to be displayed\n  useEffect(() => {\n    if (flashMessage !== \"\") setFlash(true); // triggers the next useEffect\n  }, [flashMessage]);\n\n  // Hide FlashMessage after 3 seconds\n  useEffect(() => {\n    if (flash)\n      setTimeout(() => {\n        setFlash(false);\n        setMessage(\"\");\n      }, 3000);\n  }, [flash]);\n\n  useEffect(() => {\n    const today = new Date().toISOString().split(\"T\")[0];\n    const yesterday = new Date(Date.now() - 2 * 86400000)\n      .toISOString()\n      .split(\"T\")[0];\n\n    setLoading(true)\n    Promise.all([\n      fetch(\"https://rapidapi.p.rapidapi.com/totals\", {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\",\n        },\n      })\n        .then((response) => {\n          response\n            .json()\n            .then((data) => {\n              //if(!data[0]) throw Error({type: \"err\", msg: \"Can't process request. Please Try Again!\"})\n              setWorldData([\n                {\n                  ...data[0],\n                  date: new Date().toISOString().split(\"T\")[0],\n                  active: data[0].confirmed - data[0].recovered - data[0].deaths,\n                  country: \"Worldwide\",\n                },\n              ]);\n            })\n            .catch((err) => console.log(err));\n        })\n        .catch((err) => console.error(err)),\n\n        fetch(\n          `https://api.covid19api.com/world?from=${yesterday}&to=${today}`\n        ).then((res) => {\n          res.json().then((data) => {\n            setTodayWorld({\n              Confirmed: data[1].NewConfirmed,\n              Deaths: data[1].NewDeaths,\n              Recovered: data[1].NewRecovered,\n            });\n          });\n        })\n    ])\n    .then(() => {\n      setLoading(false);\n    })\n   \n\n    \n  }, []);\n\n  return (\n    <Container style={{ minHeight: \"100vh\" }} className=\"px-0 bg-light\" fluid>\n      {loading && <LoadingOverlay />}\n      <Navbar />\n      {flash && (\n        <Alert color=\"warning\" className=\"text-center\">\n          {flashMessage}\n        </Alert>\n      )}\n      <SearchForm\n        countryData={countryData}\n        setCountryData={setCountryData}\n        country={country}\n        setCountry={setCountry}\n        setCountryCases={setCountryCases}\n        setMessage={setMessage}\n        setTodayDead={setTodayDead}\n        setTodayConfirmed={setTodayConfirmed}\n        setTodayRecovered={setTodayRecovered}\n        />\n      {\n        // <!-- DO NOT SHOW UNTILL COUNTRY INPUT -->\n        // MAIN CONTAINER COUNTRY\n        todayRecovered.length &&\n          todayDead.length &&\n          todayConfirmed.length &&\n          countryData.length && (\n            <Container fluid>\n              <Container fluid className=\"section-info flex-wrap\">\n                <h2 className=\"text-center border-bottom\">{titleCase(country)}</h2>\n                <div className=\"text-data-container\">\n                  <h3>Today</h3>\n                  <p>\n                    Recovered:{\" \"}\n                    <span style={{ color: \"#82ca9d\" }}>\n                      +{todayRecovered[0].Cases}\n                    </span>\n                  </p>\n                  <p>\n                    Deaths:{\" \"}\n                    <span style={{ color: \"black\" }}>+{todayDead[0].Cases}</span>\n                  </p>\n                  <p>\n                    Confirmed:{\" \"}\n                    <span style={{ color: \"#8884d8\" }}>\n                      +{todayConfirmed[0].Cases}\n                    </span>\n                  </p>\n                </div>\n                <BarGraph data={countryData} />\n                <div className=\"flex-break\"></div>\n                <Container fluid>\n                  <Container className=\"d-flex flex-wrap justify-content-between\" fluid>\n                    <h3 className=\"w-100 ml-4 pl-2 my-3\">Cases Evolution since Day 1</h3>\n                    <AreaGraph\n                      data={countryCasesData}\n                      type=\"Confirmed\"\n                      color=\"#8884d8\"\n                    />\n                    <AreaGraph data={countryCasesData} type=\"Active\" color=\"grey\" />\n                    <AreaGraph\n                      data={countryCasesData}\n                      type=\"Recovered\"\n                      color=\"#82ca9d\"\n                    />\n                    <AreaGraph data={countryCasesData} type=\"Deaths\" color=\"black\" />\n                  </Container>\n                </Container>\n              </Container>\n              \n            </Container>\n          )\n      }\n\n      {\n        // MAIN CONTAINER WORLD\n        todayWorld.Recovered && worldData.length && (\n          <Container fluid className=\"py-2\">\n            {/* Flex container */}\n            <Container fluid className=\"section-info\">\n            <h2 className=\"border-bottom text-center\">World Status</h2>\n\n              {/* Flex column container */}\n              <Container fluid className=\"text-data-container\">\n                <h3>Today</h3>\n                <p>\n                  Recovered:{\" \"}\n                  <span style={{ color: \"#82ca9d\" }}>\n                    +{todayWorld.Recovered}\n                  </span>\n                </p>\n                <p>\n                  Deaths:{\" \"}\n                  <span style={{ color: \"black\" }}>+{todayWorld.Deaths}</span>\n                </p>\n                <p>\n                  Confirmed:{\" \"}\n                  <span style={{ color: \"#8884d8\" }}>\n                    +{todayWorld.Confirmed}\n                  </span>\n                </p>\n              </Container>\n              <BarGraph data={worldData} />\n            </Container>\n          </Container>\n        )\n      }\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}