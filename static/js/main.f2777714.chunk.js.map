{"version":3,"sources":["LoadingOverlay/LoadingOverlay.js","Form/Form.js","Navbar/Navbar.js","Charts/AreaChart.js","Charts/PieChart.js","App.js","serviceWorker.js","index.js"],"names":["id","className","Spinner","color","setCountryCases","setCountryData","setMessage","setTodayRecovered","setTodayDead","setTodayConfirmed","setTodayActive","setCountry","country","countryData","useState","countries","setCountries","loading","setLoading","useEffect","fetch","then","res","json","data","map","obj","Country","Form","onSubmit","e","preventDefault","country_name","target","querySelector","value","find","cName","toLowerCase","today","Date","toISOString","split","Promise","all","method","headers","response","date","confirmed","recovered","critical","deaths","active","catch","err","msg","newCases","forEach","push","len","length","console","log","Deaths","Recovered","Confirmed","Math","abs","Active","setTimeout","message","CSSTransition","in","classNames","timeout","unmountOnExit","LoadingOverlay","FormGroup","Label","Input","required","placeholder","type","Container","fluid","style","borderBottom","Nav","NavbarBrand","tag","href","fontSize","AreaGraph","width","height","dataKey","strokeDasharray","fill","PieGraph","key","colors","cx","cy","outerRadius","label","nameKey","entry","index","App","worldData","setWorldData","todayWorld","setTodayWorld","countryCasesData","todayConfirmed","todayRecovered","todayDead","todayActive","flash","setFlash","flashMessage","yesterday","now","confirmed_diff","deaths_diff","recovered_diff","active_diff","error","minHeight","Navbar","Alert","str","splitStr","i","charAt","toUpperCase","substring","join","titleCase","fontWeight","status","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2777714.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Spinner } from \"reactstrap\"\r\nexport default () => {\r\n  return(\r\n    <div id=\"loading-screen\" className=\"bg-light\">\r\n      <Spinner color=\"success\" />\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport LoadingOverlay from \"../LoadingOverlay/LoadingOverlay\"\r\nimport { CSSTransition } from 'react-transition-group';\r\nexport default ({\r\n  setCountryCases,\r\n  setCountryData,\r\n  setMessage,\r\n  setTodayRecovered,\r\n  setTodayDead,\r\n  setTodayConfirmed,\r\n  setTodayActive,\r\n  country,\r\n  countryData,\r\n  setCountry,\r\n}) => {\r\n  const [countries, setCountries] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // Get all countries when component mounts\r\n  useEffect(() => {\r\n    fetch('https://api.covid19api.com/countries')\r\n      .then(res =>\r\n        res.json()\r\n          .then(data => {\r\n            setCountries(data.map(obj => obj.Country))\r\n          })\r\n      )\r\n  }, [])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const form = e.target;\r\n    const country_name = form.querySelector('#country_name').value\r\n    // check if country is in countries array (aka if it is valid)\r\n    if(!countries.find(cName => cName.toLowerCase() === country_name.toLowerCase())) {\r\n      setMessage(\"Invalid Country Name!\")\r\n      return;\r\n    }\r\n    \r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n        \r\n      setLoading(true)\r\n      Promise.all([\r\n        fetch(`https://rapidapi.p.rapidapi.com/country?name=${country_name}`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          response\r\n            .json()\r\n            .then((res) => {\r\n              setCountryData(\r\n                {\r\n                  date: today,\r\n                  confirmed: res[0].confirmed,\r\n                  recovered: res[0].recovered,\r\n                  critical: res[0].critical,\r\n                  deaths: res[0].deaths,\r\n                  active: res[0].confirmed - res[0].recovered - res[0].deaths,\r\n                },\r\n              );\r\n            })\r\n            .catch((err) => setMessage(err.msg));\r\n        })\r\n        .catch((err) => setMessage(err.msg))\r\n      ,\r\n      fetch(`https://api.covid19api.com/total/country/${country_name}`).then((res) => {\r\n        res\r\n          .json()\r\n          .then((data) => {\r\n            // Preprocess date key-value pair to have a standard YYYY-MM-DD format\r\n            const newCases = [];\r\n            data.forEach((obj) => {\r\n              newCases.push({ ...obj, Date: obj.Date.split(\"T\")[0] });\r\n            });\r\n            setCountryCases(newCases);\r\n            // Preprocess this request's data to gather recovered/deaths/confirmed from last 24h\r\n            \r\n            const len = data.length;\r\n            console.log(data[len-1]);\r\n            setTodayDead(data[len - 1].Deaths - data[len -2].Deaths);\r\n            setTodayRecovered(data[len - 1].Recovered - data[len -2].Recovered);\r\n            setTodayConfirmed(data[len - 1].Confirmed - data[len -2].Confirmed);\r\n            setTodayActive(Math.abs(data[len - 1].Active - data[len - 2].Active));\r\n          })\r\n          .catch((err) => console.log(err))\r\n      }),\r\n    ])\r\n      .then(\r\n        // adds .5s to the loading time. \r\n        setTimeout(() => {\r\n          setLoading(false) \r\n          setCountry(country_name);\r\n        }, 500)\r\n      )\r\n      .catch(err => setMessage(err.response.message))\r\n    \r\n  };\r\n\r\n  return (\r\n    <Form className=\"mt-3\" onSubmit={handleSubmit}>\r\n      <CSSTransition\r\n        in={loading}\r\n        classNames='fade'\r\n        timeout={250}\r\n        unmountOnExit\r\n      >\r\n        <LoadingOverlay />\r\n      </CSSTransition>\r\n      <FormGroup>\r\n        <Label className=\"d-block text-center\">View Country Situation</Label>\r\n        <Input\r\n          id='country_name'\r\n          required\r\n          placeholder=\"Country...\"\r\n          className=\"w-50 mx-auto\"\r\n          type=\"text\"\r\n        />\r\n      </FormGroup>\r\n      <FormGroup className=\"text-center\">\r\n        {\r\n          !loading &&\r\n          <button className=\"green-button\">Search</button>\r\n        }\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { RiVirusLine } from \"react-icons/ri\";\r\n\r\nimport { Container, Nav, NavbarBrand } from \"reactstrap\";\r\n\r\nexport default () => {\r\n  return (\r\n    <Container\r\n      className=\"py-2\"\r\n      fluid\r\n      style={{ borderBottom: \"1px solid #82ca9d\" }}\r\n    >\r\n      <Nav>\r\n        <NavbarBrand\r\n          tag=\"a\"\r\n          href=\"\"\r\n          style={{ fontSize: \"1.5rem\" }}\r\n          className=\"text-dark d-flex align-items-center\"\r\n        >\r\n          {\"<\"}\r\n          <RiVirusLine color=\"green\" />\r\n          Covid-19 Statistics\r\n          {\"/>\"}\r\n        </NavbarBrand>\r\n      </Nav>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Area,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nexport const AreaGraph = ({ data, type, color }) => {\r\n  return (\r\n    <Container className=\"area-container\" fluid>\r\n      <h2 style={{ color: color }} className=\"w-100 text-center\">\r\n        {type}\r\n      </h2>\r\n      <ResponsiveContainer width=\"90%\" className=\"mx-auto\" height={300}>\r\n        <AreaChart data={data}>\r\n          <YAxis />\r\n          <XAxis dataKey=\"Date\" />\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <Tooltip />\r\n          <Area fill={color} dataKey={type}></Area>\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react'\r\n\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n} from \"recharts\";\r\n\r\nexport const PieGraph = ({key, data}) => {\r\n\r\n  const colors = [\r\n    \"grey\",\r\n    \"#8884d8\",\r\n    \"#82ca9d\",\r\n    'black'\r\n  ]\r\n  return (\r\n    <PieChart key={key} height={250} width={400}>\r\n      <Pie\r\n        key={key}\r\n        data={data}\r\n        cx=\"50%\"\r\n        cy=\"50%\"\r\n        outerRadius={90}\r\n        label \r\n        dataKey='value' \r\n        nameKey='status'\r\n      >\r\n        {data.map((entry, index) => <Cell  key={`cell-${entry.value}`} fill={colors[index]} />)}\r\n      </Pie>\r\n    </PieChart>\r\n  )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Container, Alert } from \"reactstrap\";\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\n// Functional comp\r\nimport LoadingOverlay from \"./LoadingOverlay/LoadingOverlay\"\r\nimport SearchForm from \"./Form/Form\";\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport { AreaGraph } from \"./Charts/AreaChart\";\r\nimport { PieGraph } from \"./Charts/PieChart\";\r\n\r\nfunction App() {\r\n  // Loading state?\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // From Day One -> World data - loaded on page load\r\n  const [worldData, setWorldData] = useState({});\r\n\r\n  // Today Only - World cases Today\r\n  const [todayWorld, setTodayWorld] = useState({});\r\n\r\n  // From Day One -> Country specific data loaded upon form submit\r\n  const [countryData, setCountryData] = useState({});\r\n  const [countryCasesData, setCountryCases] = useState({});\r\n\r\n  // Today Only -> Country cases Today\r\n  const [todayConfirmed, setTodayConfirmed] = useState(0);\r\n  const [todayRecovered, setTodayRecovered] = useState(0);\r\n  const [todayDead, setTodayDead] = useState(0);\r\n  const [todayActive, setTodayActive] = useState(0);\r\n\r\n  // Form Input\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  // Flash message states - display errors and notifications\r\n  const [flash, setFlash] = useState(false);\r\n  const [flashMessage, setMessage] = useState(\"\");\r\n\r\n  // Capitalizes every word of a string.\r\n  function titleCase(str) {\r\n    var splitStr = str.toLowerCase().split(' ');\r\n    for (let i = 0; i < splitStr.length; i++) {\r\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \r\n    }\r\n    return splitStr.join(' '); \r\n  }\r\n\r\n  // When FlashMessage state changes it means a new alert needs to be displayed\r\n  useEffect(() => {\r\n    if (flashMessage !== \"\") setFlash(true); // triggers the next useEffect\r\n  }, [flashMessage]);\r\n\r\n  // Hide FlashMessage after 3 seconds\r\n  useEffect(() => {\r\n    if (flash)\r\n      setTimeout(() => {\r\n        setFlash(false);\r\n        setMessage(\"\");\r\n      }, 3000);\r\n  }, [flash]);\r\n\r\n  // Get resources\r\n  useEffect(() => {\r\n    //const today = new Date().toISOString().split(\"T\")[0];\r\n    const yesterday = new Date(Date.now() - 2 * 86400000)\r\n      .toISOString()\r\n      .split(\"T\")[0];\r\n\r\n    setLoading(true)\r\n    fetch(\"https://covid-19-statistics.p.rapidapi.com/reports/total?date=\" + yesterday, {\r\n      \"method\": \"GET\",\r\n      \"headers\": {\r\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\",\r\n        \"x-rapidapi-host\": \"covid-19-statistics.p.rapidapi.com\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      response.json()\r\n      .then(data => {\r\n        setTodayWorld({\r\n        Confirmed: data.data.confirmed_diff,\r\n        Deaths: data.data.deaths_diff,\r\n        Recovered: data.data.recovered_diff,\r\n        Active: data.data.active_diff\r\n        })\r\n        setWorldData(\r\n          {\r\n            confirmed: data.data.confirmed,\r\n            recovered: data.data.recovered,\r\n            /* This api doesn't have critical info\r\n            critical: data.data.critical,\r\n            */\r\n            active: data.data.active,\r\n            deaths: data.data.deaths,\r\n            date: new Date().toISOString().split(\"T\")[0],            \r\n            country: \"Worldwide\",\r\n          },\r\n        );\r\n        setLoading(false);\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n    })\r\n    }, []);\r\n\r\n\r\n  return (\r\n    <Container style={{ minHeight: \"100vh\" }} className=\"px-0 bg-light\" fluid>\r\n      <CSSTransition\r\n        in={loading}\r\n        classNames='fade'\r\n        timeout={250}\r\n        unmountOnExit\r\n      >\r\n        <LoadingOverlay />\r\n      </CSSTransition>\r\n      <Navbar />\r\n      {flash && (\r\n        <Alert color=\"warning\" className=\"text-center\">\r\n          {flashMessage}\r\n        </Alert>\r\n      )}\r\n      <SearchForm\r\n        countryData={countryData}\r\n        setCountryData={setCountryData}\r\n        country={country}\r\n        setCountry={setCountry}\r\n        setCountryCases={setCountryCases}\r\n        setMessage={setMessage}\r\n        setTodayActive={setTodayActive}\r\n        setTodayDead={setTodayDead}\r\n        setTodayConfirmed={setTodayConfirmed}\r\n        setTodayRecovered={setTodayRecovered}\r\n        />\r\n      {\r\n        // <!-- DO NOT SHOW UNTILL COUNTRY INPUT -->\r\n        // MAIN CONTAINER COUNTRY\r\n          countryData.confirmed && todayRecovered ? (\r\n            <Container fluid>\r\n              <Container fluid className=\"section-info\">\r\n                <h2 className=\"text-center border-bottom\">{titleCase(country)}</h2>\r\n                <Container fluid className=\"text-data-container\">\r\n                  <h3>Today</h3>\r\n                  <p>\r\n                    Confirmed:{\" \"}\r\n                    <span style={{fontWeight: 'bold', color: \"#8884d8\" }}>\r\n                      +{todayConfirmed}\r\n                    </span>\r\n                  </p>\r\n                  <p>\r\n                    Recovered:{\" \"}\r\n                    <span style={{fontWeight: 'bold', color: \"#82ca9d\" }}>\r\n                      +{todayRecovered}\r\n                    </span>\r\n                  </p>\r\n                  <p>\r\n                    Active:{\" \"}\r\n                    <span style={{fontWeight: 'bold', color: \"grey\" }}>\r\n                      +{todayActive}\r\n                    </span>\r\n                  </p>\r\n                  <p>\r\n                    Deaths:{\" \"}\r\n                    <span style={{fontWeight: 'bold', color: \"black\" }}>+{todayDead}</span>\r\n                  </p>\r\n                  \r\n                </Container>\r\n                <PieGraph \r\n                data={[\r\n                  {status: 'Active',\r\n                  value: todayActive\r\n                  },\r\n                  {status: 'Confirmed',\r\n                  value: todayConfirmed\r\n                  },\r\n                  {status: 'Recovered',\r\n                  value: todayRecovered\r\n                  },\r\n                  {status: 'deaths',\r\n                  value: todayDead\r\n                  },\r\n                  ]}\r\n                />\r\n              </Container>\r\n            </Container>\r\n          )\r\n          : <></>\r\n      }\r\n\r\n      {\r\n        /* Specific Case Types Graphs By Country */\r\n        countryCasesData.length ? (\r\n          <Container className=\"d-flex flex-wrap justify-content-between\" fluid>\r\n            <h3 className=\"w-100 ml-4 pl-2 my-3\">Cases Evolution since Day 1</h3>\r\n            <AreaGraph\r\n              data={countryCasesData}\r\n              type=\"Confirmed\"\r\n              color=\"#8884d8\"\r\n            />\r\n            <AreaGraph data={countryCasesData} type=\"Active\" color=\"grey\" />\r\n            <AreaGraph\r\n              data={countryCasesData}\r\n              type=\"Recovered\"\r\n              color=\"#82ca9d\"\r\n            />\r\n            <AreaGraph data={countryCasesData} type=\"Deaths\" color=\"black\" />\r\n          </Container>\r\n        ) : <></>\r\n      }\r\n\r\n      {\r\n        // MAIN CONTAINER WORLD\r\n        worldData.active && todayWorld.Confirmed ? (\r\n          <Container fluid className=\"py-2\">\r\n            {/* Flex container */}\r\n            <Container fluid className=\"section-info\">\r\n            <h2 className=\"border-bottom text-center\">World Status</h2>\r\n\r\n              {/* Flex column container */}\r\n              <Container fluid className=\"text-data-container\">\r\n                <h3>Today</h3>\r\n                <p>\r\n                  Confirmed:{\" \"}\r\n                  <span style={{fontWeight: 'bold', color: \"#8884d8\" }}>\r\n                    +{todayWorld.Confirmed}\r\n                  </span>\r\n                </p>\r\n                <p>\r\n                  Active:{\" \"}\r\n                  <span style={{fontWeight: 'bold', color: \"grey\" }}>\r\n                    +{todayWorld.Active}\r\n                  </span>\r\n                </p>\r\n                <p>\r\n                  Recovered:{\" \"}\r\n                  <span style={{fontWeight: 'bold', color: \"#82ca9d\" }}>\r\n                    +{todayWorld.Recovered}\r\n                  </span>\r\n                </p>\r\n                <p>\r\n                  Deaths:{\" \"}\r\n                  <span style={{fontWeight: 'bold', color: \"black\" }}>+{todayWorld.Deaths}</span>\r\n                </p>\r\n              </Container>\r\n              {/*<BarGraph data={worldData} />*/}\r\n              <PieGraph\r\n                data={\r\n                  [{\r\n                    status: 'Active',\r\n                    value: worldData.active\r\n                  }, \r\n                  {\r\n                    status: 'Confirmed',\r\n                    value: worldData.confirmed\r\n                  },\r\n                  {\r\n                    status: 'Recovered',\r\n                    value: worldData.recovered\r\n                  },\r\n                  {\r\n                    status: 'Deaths',\r\n                    value: worldData.deaths\r\n                  }\r\n                ]\r\n                } \r\n              />\r\n              \r\n            </Container>\r\n          </Container>\r\n        ) : <></>\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}