{"version":3,"sources":["Form/Form.js","Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["data","setData","useState","country","setCountry","Form","onSubmit","e","preventDefault","fetch","then","response","json","res","date","Date","toISOString","split","catch","err","console","error","FormGroup","Label","className","Input","type","onChange","target","value","Button","Container","fluid","width","height","strokeDasharray","dataKey","fill","App","countryData","setCountryData","worldData","setWorldData","useEffect","style","minHeight","color","length","Chart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0VAQe,cAAqB,EAAnBA,KAAoB,IAAdC,EAAa,EAAbA,QAAa,EACJC,mBAAS,IADL,mBAC3BC,EAD2B,KAClBC,EADkB,KAuBlC,OACE,kBAACC,EAAA,EAAD,CAAMC,SArBa,SAACC,GACpBA,EAAEC,iBAEFC,MAAM,4EAAD,OAA6EN,GAAW,CAC3F,OAAU,MACV,QAAW,CACT,kBAAmB,+BACnB,iBAAkB,wDAGrBO,MAAK,SAAAC,GACJA,EAASC,OACRF,MAAK,SAAAG,GAAG,OAAIZ,EAAS,CAAC,2BAAIY,EAAI,GAAJ,UAAoB,IAAzB,IAA6BC,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,aAE9FC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,QAOd,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,UAAU,uBAAjB,gBACA,kBAACC,EAAA,EAAD,CAAOD,UAAU,eAAcE,KAAK,OAAOC,SAAU,SAACpB,GAAD,OAAOH,EAAWG,EAAEqB,OAAOC,WAElF,kBAACP,EAAA,EAAD,CAAWE,UAAU,eACnB,kBAACM,EAAA,EAAD,CAAQN,UAAU,yCAAlB,a,QCnCO,cAAa,IAAXxB,EAAU,EAAVA,KAAU,EACEE,mBAAS,IADX,6BAczB,OACE,kBAAC6B,EAAA,EAAD,CAAWC,OAAK,EAACR,UAAU,iCAEzB,kBAAC,IAAD,CAAUS,MAAO,IAAKC,OAAQ,IAAKlC,KAAMA,GACvC,kBAAC,IAAD,CAAemC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKA,QAAQ,SAASC,KAAK,SAC3B,kBAAC,IAAD,CAAKD,QAAQ,YAAYC,KAAK,YAC9B,kBAAC,IAAD,CAAKD,QAAQ,YAAYC,KAAK,YAC9B,kBAAC,IAAD,CAAKD,QAAQ,SAASC,KAAK,kBAC3B,kBAAC,IAAD,CAAKD,QAAQ,WAAWC,KAAK,WCetBC,MArCf,WAAgB,IAAD,EACyBpC,mBAAS,IADlC,mBACNqC,EADM,KACOC,EADP,OAEqBtC,mBAAS,IAF9B,mBAENuC,EAFM,KAEKC,EAFL,KAwBb,OApBAC,qBAAU,WAERlC,MAAM,gEAAiE,CACrE,OAAU,MACV,QAAW,CACT,kBAAmB,+BACnB,iBAAkB,wDAGrBC,MAAK,SAAAC,GACJA,EAASC,OACNF,MAAK,SAAAG,GAAG,OAAI6B,EAAa7B,SAE7BK,OAAM,SAAAC,GACLC,QAAQC,MAAMF,QAIf,IAGD,kBAACY,EAAA,EAAD,CAAWa,MAAO,CAACC,UAAW,SAAUrB,UAAU,WAAWQ,OAAK,GAChE,wBAAIR,UAAU,oDACd,kBAAC,IAAD,CAAasB,MAAM,UACnB,mDAEA,kBAAC,EAAD,CAAa9C,KAAMuC,EAAatC,QAASuC,IACxCC,EAAUM,QAAU,kBAACC,EAAD,CAAOhD,KAAMyC,IACjCF,EAAYQ,QAAU,kBAACC,EAAD,CAAOhD,KAAMuC,MC5BtBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEd7C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM2C,c","file":"static/js/main.10ddd356.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport {\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Button\n} from \"reactstrap\"\nexport default ({data, setData}) => {\n  const [country, setCountry] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    fetch(`https://rapidapi.p.rapidapi.com/report/country/name?date=2020-04-01&name=${country}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    .then(response => {\n      response.json()\n      .then(res => setData( [{...res[0]['provinces'][0], date: new Date().toISOString().split('T')[0]}] ))\n    })\n    .catch(err => {\n      console.error(err);\n    });\n\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormGroup>\n        <Label className=\"d-block text-center\">Country Name</Label>\n        <Input className=\"w-50 mx-auto\"type=\"text\" onChange={(e) => setCountry(e.target.value)} />\n      </FormGroup>\n      <FormGroup className=\"text-center\">\n        <Button className=\"btn btn-sm btn-outline-info btn-light\">\n          Search\n        </Button>\n      </FormGroup>\n    </Form>\n  )\n}","import React, { useState, useEffect } from \"react\"\nimport { PieChart, Pie, BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar } from \"recharts\"\nimport { Container } from \"reactstrap\"\nexport default ({data}) => {\n  const [dataSet, setData] = useState([])\n  /*\n  useEffect(() => {\n    data.country && setData([{...data['provinces'][0], date: new Date().toISOString().split('T')[0]}])\n  }, [data])\n  */\n  /*\n  useEffect(() => {\n    dataSet.active && (\n      return dataSet.map(data => {\"name\": data})\n    )\n  }, [dataSet])\n  */\n  return(\n    <Container fluid className=\"d-flex justify-content-center\">\n\n      <BarChart width={800} height={250} data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"active\" fill=\"grey\" />\n        <Bar dataKey=\"confirmed\" fill=\"#8884d8\" />\n        <Bar dataKey=\"recovered\" fill=\"#82ca9d\" />\n        <Bar dataKey=\"deaths\" fill=\"rgba(0,0,0,1)\" />\n        <Bar dataKey=\"critical\" fill=\"red\" />\n      </BarChart>\n    </Container>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { RiVirusLine } from \"react-icons/ri\";\n\nimport { Container } from \"reactstrap\";\nimport CountryForm from \"./Form/Form\";\nimport Chart from \"./Chart/Chart\";\nfunction App() {\n  const [countryData, setCountryData] = useState({})\n  const [worldData, setWorldData] = useState({})\n\n  useEffect(() => {\n    // Get WORLD Data\n    fetch(\"https://rapidapi.p.rapidapi.com/report/totals?date=2020-07-21\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    .then(response => {\n      response.json()\n        .then(res => setWorldData(res))\n    })\n    .catch(err => {\n      console.error(err);\n    });\n\n\n  }, [])\n\n  return (\n    <Container style={{minHeight: \"100vh\"}} className=\"bg-light\" fluid>\n      <h2 className=\"justify-content-center d-flex align-items-center\">\n      <RiVirusLine color=\"green\" />\n      <span>Covid-19 Tracker</span>\n      </h2>\n      <CountryForm data={countryData} setData={setCountryData} />\n      {worldData.length && <Chart data={worldData} />}\n      {countryData.length && <Chart data={countryData} />}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}