{"version":3,"sources":["Form/Form.js","Charts/BarChart.js","Navbar/Navbar.js","Charts/AreaChart.js","App.js","serviceWorker.js","index.js"],"names":["setCountryCases","setCountryData","setMessage","countryCasesData","useState","country","setCountry","Form","className","onSubmit","e","preventDefault","date","Date","toISOString","split","fetch","then","response","json","res","type","msg","active","confirmed","recovered","deaths","catch","err","data","newCases","forEach","obj","push","FormGroup","Label","Input","required","placeholder","onChange","target","value","BarGraph","title","Container","fluid","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","style","borderBottom","Nav","NavbarBrand","tag","href","fontSize","color","AreaGraph","App","worldData","setWorldData","countryData","flash","setFlash","flashMessage","useEffect","setTimeout","Error","console","log","error","minHeight","Navbar","Alert","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.40bd35c9.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport {\n  Form,\n  FormGroup,\n  Input,\n  Label,\n} from \"reactstrap\"\nexport default ({setCountryCases, setCountryData, countryCasesData, setMessage}) => {\n  const [country, setCountry] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const date = new Date().toISOString().split('T')[0]\n\n    // Get General Country stats\n    fetch(`https://rapidapi.p.rapidapi.com/country?name=${country}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    .then(response => {\n      response.json()\n      .then(res => {\n        // In case of invalid country name throw error\n        if(!res[0] || !res[0].country) throw { type: \"err\", msg:\"Invalid Country Name!\"}\n        setCountryData([{\n          ...res[0], \n          date,\n          active: res[0].confirmed - res[0].recovered - res[0].deaths  \n        }])\n      })\n      .catch(err => setMessage(err.msg))\n    })\n    .catch(err => setMessage(err.msg))\n\n    // Get Info about cases evolution\n    // Active Cases since day one\n    fetch(`https://api.covid19api.com/total/country/${country}`)\n     .then(res => {\n      res.json()\n        .then(data => {\n          // Preprocess date key-value pair to have a standard YYYY-MM-DD format\n          const newCases = [];\n          data.forEach((obj) => {\n            newCases.push({...obj, Date: obj.Date.split('T')[0]})\n          })\n          setCountryCases(newCases)\n        })\n    })\n  }\n\n  return (\n    <Form className=\"mt-3\" onSubmit={handleSubmit}>\n      <FormGroup>\n        <Label className=\"d-block text-center\">View Country Situation</Label>\n        <Input required placeholder=\"Country...\" className=\"w-50 mx-auto\"type=\"text\" onChange={(e) => setCountry(e.target.value)} />\n      </FormGroup>\n      <FormGroup className=\"text-center\">\n        <button className=\"green-button\">\n          Search\n        </button>\n      </FormGroup>\n    </Form>\n  )\n}","import React from \"react\"\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar, ResponsiveContainer } from \"recharts\"\nimport { Container } from \"reactstrap\"\n\nexport const BarGraph = ({data, title}) => {\n  // Preprocess data\n  \n  return(\n    <Container fluid>\n      <h3 className=\"w-100 text-center\">{ \"Total \" + data[0].country}</h3>\n      <br />\n      { \n      <ResponsiveContainer className=\"mx-auto\" width=\"80%\" height={300}>\n        <BarChart data={data}\n        margin={{ top: 20, right: 10, left: 30, bottom: 0 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"confirmed\" fill=\"#8884d8\" />\n          <Bar dataKey=\"recovered\" fill=\"#82ca9d\" />\n          <Bar dataKey=\"active\" fill=\"grey\" />\n          <Bar dataKey=\"deaths\" fill=\"rgba(0,0,0,1)\" />\n          <Bar dataKey=\"critical\" fill=\"red\" />\n        </BarChart>\n      </ResponsiveContainer>\n      }\n    </Container>\n  )\n}\n","\nimport React from \"react\";\nimport { RiVirusLine } from \"react-icons/ri\";\n\nimport {\n  Container,\n  Nav,\n  NavbarBrand,\n} from \"reactstrap\";\n\nexport default () => {\n  return (\n    <Container className=\"py-2\" fluid style={{borderBottom: \"1px solid #82ca9d\"}}>\n      <Nav>\n        <NavbarBrand tag=\"a\" href=\"\" style={{fontSize: \"1.5rem\"}}className=\"text-dark d-flex align-items-center\">\n          {'<'} \n          <RiVirusLine color=\"green\" />Covid-19 Statistics\n          {'/>'}\n        </NavbarBrand>\n      </Nav>\n    </Container>\n  )\n}","import React from \"react\";\nimport {\n  AreaChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Area,\n  ResponsiveContainer\n} from \"recharts\";\nimport { Container } from \"reactstrap\"\n\nexport const AreaGraph = ({data, type, color}) => {\n  return (\n    <Container className=\"area-container\" fluid>\n      <h2 style={{color: color}} className=\"w-100 text-center\">{type}</h2>\n      <ResponsiveContainer width=\"90%\" className=\"mx-auto\" height={300}>\n        <AreaChart data={data}>\n          <YAxis />\n          <XAxis dataKey=\"Date\" />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area fill={color} dataKey={type}></Area>\n        </AreaChart>\n      </ResponsiveContainer>\n    </Container>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { \n  Container, \n  Alert\n} from \"reactstrap\";\n\n// Functional comp\nimport SearchForm from \"./Form/Form\";\nimport { BarGraph } from \"./Charts/BarChart\";\nimport Navbar from \"./Navbar/Navbar\";\nimport { AreaGraph }  from './Charts/AreaChart';\n\nfunction App() {\n  // World data - loaded on page load\n  const [worldData, setWorldData] = useState({})\n\n  // Country specific data - loaded upon form submit\n  const [countryData, setCountryData] = useState({})\n  const [countryCasesData, setCountryCases] = useState({})\n\n  // Flash message states - display errors and notifications \n  const [flash, setFlash] = useState(false)\n  const [flashMessage, setMessage] = useState(\"\")\n\n\n  // PREPROCESS DATA FROM API\n\n\n  // When FlashMessage state changes it means a new alert needs to be displayed\n  useEffect(() => {\n    if(flashMessage !== \"\") setFlash(true); // triggers the next useEffect\n  }, [flashMessage])\n\n  // Hide FlashMessage after 3 seconds\n  useEffect(() => {\n    if(flash) setTimeout(() => {\n      setFlash(false)\n      setMessage(\"\")\n    }, 3000)\n  }, [flash])\n\n  useEffect(() => {\n    // GET World Data for today\n    fetch(\"https://rapidapi.p.rapidapi.com/totals\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\"\n      }\n    })\n    .then(response => {\n      response.json()\n        .then(data => {\n          if(!data[0]) throw Error({type: \"err\", msg: \"Can't process request. Please Try Again!\"})\n          setWorldData([{\n            ...data[0],\n            date: new Date().toISOString().split('T')[0],\n            active: data[0].confirmed - data[0].recovered - data[0].deaths,\n            country: \"Worldwide\"  \n          }])\n        })\n        .catch(err => console.log(err))\n    })\n    .catch(err => console.error(err))\n    \n  }, [])\n\n  return (\n    <Container style={{minHeight: \"100vh\"}} className=\"px-0 bg-light\" fluid>\n      <Navbar />\n      {flash && \n        <Alert color=\"warning\" className=\"text-center\">\n          {flashMessage}\n        </Alert>\n      }\n      <SearchForm\n        countryData={countryData} \n        setCountryData={setCountryData}\n        countryCasesData={countryCasesData}\n        setCountryCases={setCountryCases}\n        setMessage={setMessage}\n        />\n      { //General Country Stats Chart\n        countryData.length && <BarGraph data={countryData} />\n      }\n      { /* Specific Case Types By Country */}\n      <Container className=\"d-flex flex-wrap justify-content-between\" fluid>\n        { //Confirmed Cases Chart\n          countryCasesData.length && <AreaGraph data={countryCasesData} type=\"Confirmed\" color=\"#8884d8\" />\n        }\n        { //Active Cases Chart \n          countryCasesData.length && <AreaGraph data={countryCasesData} type=\"Active\" color=\"grey\"/>\n        }\n        { //Recovered Cases Chart\n          countryCasesData.length && <AreaGraph data={countryCasesData} type=\"Recovered\" color=\"#82ca9d\" />\n        }\n        { //Fatal Cases Chart\n          countryCasesData.length && <AreaGraph data={countryCasesData} type=\"Deaths\" color=\"black\" />\n        }\n      </Container>\n        { //General World Info Chart\n          worldData.length && <BarGraph data={worldData}/>\n        }\n      <Container className=\"d-flex flex-wrap justify-content-between\" fluid>\n        {\n\n        }\n      </Container>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}