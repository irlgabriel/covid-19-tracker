{"version":3,"sources":["LoadingOverlay/LoadingOverlay.js","Form/Form.js","Charts/BarChart.js","Navbar/Navbar.js","Charts/AreaChart.js","App.js","serviceWorker.js","index.js"],"names":["id","className","Spinner","color","setCountryCases","setCountryData","setMessage","setTodayRecovered","setTodayDead","setTodayConfirmed","setCountry","country","useState","countries","setCountries","loading","setLoading","useEffect","fetch","then","res","json","data","map","obj","Country","Form","onSubmit","e","preventDefault","country_name","target","querySelector","value","find","cName","toLowerCase","today","Date","toISOString","split","now","Promise","all","method","headers","response","date","confirmed","recovered","critical","deaths","active","catch","err","msg","newCases","forEach","push","len","length","console","log","Deaths","Recovered","Confirmed","setTimeout","message","LoadingOverlay","FormGroup","Label","Input","required","placeholder","type","BarGraph","title","Container","fluid","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","style","borderBottom","Nav","NavbarBrand","tag","href","fontSize","AreaGraph","App","worldData","setWorldData","todayWorld","setTodayWorld","countryData","countryCasesData","todayConfirmed","todayRecovered","todayDead","flash","setFlash","flashMessage","yesterday","confirmed_diff","deaths_diff","recovered_diff","error","minHeight","Navbar","Alert","str","splitStr","i","charAt","toUpperCase","substring","join","titleCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d910eb59.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Spinner } from \"reactstrap\"\r\nexport default () => {\r\n  return(\r\n    <div id=\"loading-screen\" className=\"bg-light\">\r\n      <Spinner color=\"success\" />\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport LoadingOverlay from \"../LoadingOverlay/LoadingOverlay\"\r\nexport default ({\r\n  setCountryCases,\r\n  setCountryData,\r\n  setMessage,\r\n  setTodayRecovered,\r\n  setTodayDead,\r\n  setTodayConfirmed,\r\n  country,\r\n  setCountry,\r\n}) => {\r\n  const [countries, setCountries] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // Get all countries when component mounts\r\n  useEffect(() => {\r\n    fetch('https://api.covid19api.com/countries')\r\n      .then(res =>\r\n        res.json()\r\n          .then(data => {\r\n            setCountries(data.map(obj => obj.Country))\r\n          })\r\n      )\r\n  }, [])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const form = e.target;\r\n    const country_name = form.querySelector('#country_name').value\r\n    // check if country is in countries array (aka if it is valid)\r\n    if(!countries.find(cName => cName.toLowerCase() === country_name.toLowerCase())) {\r\n      setMessage(\"Invalid Country Name!\")\r\n      return;\r\n    }\r\n    \r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    const yesterday = new Date(Date.now() - 2 * 86400000)\r\n      .toISOString()\r\n      .split(\"T\")[0];\r\n        \r\n      setLoading(true)\r\n      Promise.all([\r\n        fetch(`https://rapidapi.p.rapidapi.com/country?name=${country_name}`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          response\r\n            .json()\r\n            .then((res) => {\r\n              setCountryData([\r\n                {\r\n                  date: today,\r\n                  confirmed: res[0].confirmed,\r\n                  recovered: res[0].recovered,\r\n                  critical: res[0].critical,\r\n                  deaths: res[0].deaths,\r\n                  active: res[0].confirmed - res[0].recovered - res[0].deaths,\r\n                }],\r\n              );\r\n            })\r\n            .catch((err) => setMessage(err.msg));\r\n        })\r\n        .catch((err) => setMessage(err.msg))\r\n      ,\r\n      fetch(`https://api.covid19api.com/total/country/${country_name}`).then((res) => {\r\n        res\r\n          .json()\r\n          .then((data) => {\r\n            // Preprocess date key-value pair to have a standard YYYY-MM-DD format\r\n            const newCases = [];\r\n            data.forEach((obj) => {\r\n              newCases.push({ ...obj, Date: obj.Date.split(\"T\")[0] });\r\n            });\r\n            setCountryCases(newCases);\r\n            // Preprocess this request's data to gather recovered/deaths/confirmed from last 24h\r\n            const len = data.length;\r\n            console.log(data[len-1]);\r\n            setTodayDead(data[len - 1].Deaths - data[len -2].Deaths);\r\n            setTodayRecovered(data[len - 1].Recovered - data[len -2].Recovered);\r\n            setTodayConfirmed(data[len - 1].Confirmed - data[len -2].Confirmed)\r\n          })\r\n          .catch((err) => console.log(err))\r\n      }),\r\n      /*\r\n      fetch(\r\n        `https://api.covid19api.com/country/${country}/status/deaths?from=${yesterday}&to=${today}`\r\n      ).then((res) =>\r\n        res.json().then((data) => {\r\n          if (data[1]) {\r\n            setTodayDead([{ Cases: data[1].Cases - data[0].Cases }]);\r\n          }\r\n        })\r\n      ),\r\n      fetch(\r\n        `https://api.covid19api.com/country/${country}/status/recovered?from=${yesterday}&to=${today}`\r\n      ).then((res) =>\r\n        res.json().then((data) => {\r\n          if (data[1]) {\r\n            setTodayRecovered([{ Cases: data[1].Cases - data[0].Cases }]);\r\n          }\r\n        })\r\n      ),\r\n      fetch(\r\n        `https://api.covid19api.com/country/${country}/status/confirmed?from=${yesterday}&to=${today}`\r\n      ).then((res) =>\r\n        res.json().then((data) => {\r\n          if (data[1]) {\r\n            setTodayConfirmed([{ Cases: data[1].Cases - data[0].Cases }]);\r\n          }\r\n        })\r\n      )\r\n      */\r\n    ])\r\n      .then(\r\n        // adds .5s to the loading time. \r\n        setTimeout(() => {\r\n          setLoading(false) \r\n          setCountry(country_name);\r\n        }, 500)\r\n      )\r\n      .catch(err => setMessage(err.response.message))\r\n    \r\n  };\r\n\r\n  return (\r\n    <Form className=\"mt-3\" onSubmit={handleSubmit}>\r\n      {loading && <LoadingOverlay />}\r\n      <FormGroup>\r\n        <Label className=\"d-block text-center\">View Country Situation</Label>\r\n        <Input\r\n          id='country_name'\r\n          required\r\n          placeholder=\"Country...\"\r\n          className=\"w-50 mx-auto\"\r\n          type=\"text\"\r\n        />\r\n      </FormGroup>\r\n      <FormGroup className=\"text-center\">\r\n        {\r\n          !loading &&\r\n          <button className=\"green-button\">Search</button>\r\n        }\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  BarChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Bar,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nexport const BarGraph = ({ data, title }) => {\r\n  // Preprocess data\r\n  return (\r\n    <Container fluid className=\"main-chart-container\">\r\n      <h3>Totals</h3>\r\n      {\r\n        <ResponsiveContainer className=\"mx-auto\" width=\"100%\" height={300}>\r\n          <BarChart\r\n            data={data}\r\n            margin={{ top: 20, right: 10, left: 30, bottom: 0 }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Bar dataKey=\"confirmed\" fill=\"#8884d8\" />\r\n            <Bar dataKey=\"recovered\" fill=\"#82ca9d\" />\r\n            <Bar dataKey=\"active\" fill=\"grey\" />\r\n            <Bar dataKey=\"deaths\" fill=\"rgba(0,0,0,1)\" />\r\n            <Bar dataKey=\"critical\" fill=\"red\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      }\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { RiVirusLine } from \"react-icons/ri\";\r\n\r\nimport { Container, Nav, NavbarBrand } from \"reactstrap\";\r\n\r\nexport default () => {\r\n  return (\r\n    <Container\r\n      className=\"py-2\"\r\n      fluid\r\n      style={{ borderBottom: \"1px solid #82ca9d\" }}\r\n    >\r\n      <Nav>\r\n        <NavbarBrand\r\n          tag=\"a\"\r\n          href=\"\"\r\n          style={{ fontSize: \"1.5rem\" }}\r\n          className=\"text-dark d-flex align-items-center\"\r\n        >\r\n          {\"<\"}\r\n          <RiVirusLine color=\"green\" />\r\n          Covid-19 Statistics\r\n          {\"/>\"}\r\n        </NavbarBrand>\r\n      </Nav>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Area,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nexport const AreaGraph = ({ data, type, color }) => {\r\n  return (\r\n    <Container className=\"area-container\" fluid>\r\n      <h2 style={{ color: color }} className=\"w-100 text-center\">\r\n        {type}\r\n      </h2>\r\n      <ResponsiveContainer width=\"90%\" className=\"mx-auto\" height={300}>\r\n        <AreaChart data={data}>\r\n          <YAxis />\r\n          <XAxis dataKey=\"Date\" />\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <Tooltip />\r\n          <Area fill={color} dataKey={type}></Area>\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Container, Alert } from \"reactstrap\";\r\n\r\n// Functional comp\r\nimport LoadingOverlay from \"./LoadingOverlay/LoadingOverlay\"\r\nimport SearchForm from \"./Form/Form\";\r\nimport { BarGraph } from \"./Charts/BarChart\";\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport { AreaGraph } from \"./Charts/AreaChart\";\r\n\r\nfunction App() {\r\n  // Loading state?\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // From Day One -> World data - loaded on page load\r\n  const [worldData, setWorldData] = useState({});\r\n\r\n  // Today Only - World cases Today\r\n  const [todayWorld, setTodayWorld] = useState({});\r\n\r\n  // From Day One -> Country specific data loaded upon form submit\r\n  const [countryData, setCountryData] = useState({});\r\n  const [countryCasesData, setCountryCases] = useState({});\r\n\r\n  // Today Only -> Country cases Today\r\n  const [todayConfirmed, setTodayConfirmed] = useState({});\r\n  const [todayRecovered, setTodayRecovered] = useState({});\r\n  const [todayDead, setTodayDead] = useState({});\r\n\r\n  // Form Input\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  // Flash message states - display errors and notifications\r\n  const [flash, setFlash] = useState(false);\r\n  const [flashMessage, setMessage] = useState(\"\");\r\n\r\n  // Capitalizes every word of a string.\r\n  function titleCase(str) {\r\n    var splitStr = str.toLowerCase().split(' ');\r\n    for (let i = 0; i < splitStr.length; i++) {\r\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \r\n    }\r\n    return splitStr.join(' '); \r\n  }\r\n\r\n  // When FlashMessage state changes it means a new alert needs to be displayed\r\n  useEffect(() => {\r\n    if (flashMessage !== \"\") setFlash(true); // triggers the next useEffect\r\n  }, [flashMessage]);\r\n\r\n  // Hide FlashMessage after 3 seconds\r\n  useEffect(() => {\r\n    if (flash)\r\n      setTimeout(() => {\r\n        setFlash(false);\r\n        setMessage(\"\");\r\n      }, 3000);\r\n  }, [flash]);\r\n\r\n  useEffect(() => {\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    const yesterday = new Date(Date.now() - 2 * 86400000)\r\n      .toISOString()\r\n      .split(\"T\")[0];\r\n\r\n    setLoading(true)\r\n    Promise.all([\r\n      /*\r\n      fetch(\"https://rapidapi.p.rapidapi.com/totals\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\r\n          \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\",\r\n        },\r\n      })\r\n        .then((response) => {\r\n          response\r\n            .json()\r\n            .then((data) => {\r\n              //if(!data[0]) throw Error({type: \"err\", msg: \"Can't process request. Please Try Again!\"})\r\n              setWorldData([\r\n                {\r\n                  ...data[0],\r\n                  date: new Date().toISOString().split(\"T\")[0],\r\n                  active: data[0].confirmed - data[0].recovered - data[0].deaths,\r\n                  country: \"Worldwide\",\r\n                },\r\n              ]);\r\n            })\r\n            .catch((err) => console.log(err));\r\n        })\r\n        .catch((err) => console.error(err)),\r\n        */\r\n        /*\r\n        // this one returns null lately\r\n        fetch(\r\n          `https://api.covid19api.com/world?from=${yesterday}&to=${today}`\r\n        ).then((res) => {\r\n          res.json().then((data) => {\r\n            console.log(data);\r\n            \r\n            setTodayWorld({\r\n              Confirmed: data[1].NewConfirmed,\r\n              Deaths: data[1].NewDeaths,\r\n              Recovered: data[1].NewRecovered,\r\n            });\r\n            \r\n          });\r\n        }), \r\n        */\r\n       fetch(\"https://covid-19-statistics.p.rapidapi.com/reports/total?date=\" + yesterday, {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n          \"x-rapidapi-key\": \"d89eb58edamsh10814d1e692895ep158751jsn8a8b4c01281a\",\r\n          \"x-rapidapi-host\": \"covid-19-statistics.p.rapidapi.com\"\r\n        }\r\n      })\r\n      .then(response => {\r\n        response.json()\r\n        .then(data => {\r\n          console.log(data); \r\n          setTodayWorld({\r\n          Confirmed: data.data.confirmed_diff,\r\n          Deaths: data.data.deaths_diff,\r\n          Recovered: data.data.recovered_diff\r\n          })\r\n          setWorldData([\r\n            {\r\n              confirmed: data.data.confirmed,\r\n              recovered: data.data.recovered,\r\n              //critical: data.data.critical,\r\n              active: data.data.active,\r\n              deaths: data.data.deaths,\r\n              date: new Date().toISOString().split(\"T\")[0],            \r\n              country: \"Worldwide\",\r\n            },\r\n          ]);\r\n        })\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      })\r\n    ])\r\n    .then(() => {\r\n      setLoading(false);\r\n    })\r\n   \r\n\r\n    \r\n  }, []);\r\n\r\n  return (\r\n    <Container style={{ minHeight: \"100vh\" }} className=\"px-0 bg-light\" fluid>\r\n      {loading && <LoadingOverlay />}\r\n      <Navbar />\r\n      {flash && (\r\n        <Alert color=\"warning\" className=\"text-center\">\r\n          {flashMessage}\r\n        </Alert>\r\n      )}\r\n      <SearchForm\r\n        countryData={countryData}\r\n        setCountryData={setCountryData}\r\n        country={country}\r\n        setCountry={setCountry}\r\n        setCountryCases={setCountryCases}\r\n        setMessage={setMessage}\r\n        setTodayDead={setTodayDead}\r\n        setTodayConfirmed={setTodayConfirmed}\r\n        setTodayRecovered={setTodayRecovered}\r\n        />\r\n      {\r\n        // <!-- DO NOT SHOW UNTILL COUNTRY INPUT -->\r\n        // MAIN CONTAINER COUNTRY\r\n          countryData.length && (\r\n            <Container fluid>\r\n              <Container fluid className=\"section-info\">\r\n                <h2 className=\"text-center border-bottom\">{titleCase(country)}</h2>\r\n                <Container fluid className=\"text-data-container\">\r\n                  <h3>Today</h3>\r\n                  <p>\r\n                    Recovered:{\" \"}\r\n                    <span style={{ color: \"#82ca9d\" }}>\r\n                      +{todayRecovered}\r\n                    </span>\r\n                  </p>\r\n                  <p>\r\n                    Deaths:{\" \"}\r\n                    <span style={{ color: \"black\" }}>+{todayDead}</span>\r\n                  </p>\r\n                  <p>\r\n                    Confirmed:{\" \"}\r\n                    <span style={{ color: \"#8884d8\" }}>\r\n                      +{todayConfirmed}\r\n                    </span>\r\n                  </p>\r\n                </Container>\r\n                <BarGraph data={countryData} />\r\n              </Container>\r\n            </Container>\r\n          )\r\n      }\r\n\r\n      {\r\n        /* Specific Case Types Graphs By Country */\r\n        countryCasesData.length && (\r\n          <Container className=\"d-flex flex-wrap justify-content-between\" fluid>\r\n            <h3 className=\"w-100 ml-4 pl-2 my-3\">Cases Evolution since Day 1</h3>\r\n            <AreaGraph\r\n              data={countryCasesData}\r\n              type=\"Confirmed\"\r\n              color=\"#8884d8\"\r\n            />\r\n            <AreaGraph data={countryCasesData} type=\"Active\" color=\"grey\" />\r\n            <AreaGraph\r\n              data={countryCasesData}\r\n              type=\"Recovered\"\r\n              color=\"#82ca9d\"\r\n            />\r\n            <AreaGraph data={countryCasesData} type=\"Deaths\" color=\"black\" />\r\n          </Container>\r\n        )\r\n      }\r\n\r\n      {\r\n        // MAIN CONTAINER WORLD\r\n        todayWorld.Recovered && worldData.length && (\r\n          <Container fluid className=\"py-2\">\r\n            {/* Flex container */}\r\n            <Container fluid className=\"section-info\">\r\n            <h2 className=\"border-bottom text-center\">World Status</h2>\r\n\r\n              {/* Flex column container */}\r\n              <Container fluid className=\"text-data-container\">\r\n                <h3>Today</h3>\r\n                <p>\r\n                  Recovered:{\" \"}\r\n                  <span style={{ color: \"#82ca9d\" }}>\r\n                    +{todayWorld.Recovered}\r\n                  </span>\r\n                </p>\r\n                <p>\r\n                  Deaths:{\" \"}\r\n                  <span style={{ color: \"black\" }}>+{todayWorld.Deaths}</span>\r\n                </p>\r\n                <p>\r\n                  Confirmed:{\" \"}\r\n                  <span style={{ color: \"#8884d8\" }}>\r\n                    +{todayWorld.Confirmed}\r\n                  </span>\r\n                </p>\r\n              </Container>\r\n              <BarGraph data={worldData} />\r\n            </Container>\r\n          </Container>\r\n        )\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}